// Generated by CoffeeScript 1.8.0
(function() {
  var Context, Path, Q, fs, fsx,
    __slice = [].slice;

  Path = require('path');

  fs = require('fs');

  Q = require('q');

  fsx = require('fs-extra');

  Context = (function() {
    function Context(path) {
      this.path = path;
    }

    Context.prototype.getContent = function(filename, options) {
      var read;
      if (options == null) {
        options = {
          encoding: 'utf8'
        };
      }
      read = Q.denodeify(fs.readFile);
      return read(this.resolve(filename), options);
    };

    Context.prototype.readDir = function(relativePath) {
      var read;
      read = Q.denodeify(fs.readdir);
      return read(this.resolve(relativePath));
    };

    Context.prototype.stat = function(path) {
      path = this.resolve(path);
      return Q.denodeify(fs.stat)(path);
    };

    Context.prototype.write = function(path, content) {
      var write;
      write = Q.denodeify(fs.writeFile);
      return write(this.resolve(path), content);
    };

    Context.prototype.copy = function(inPath, outPath) {
      var copy;
      copy = Q.denodeify(fsx.copy);
      return this.remove(outPath).then((function(_this) {
        return function() {
          return copy(_this.resolve(inPath), _this.resolve(outPath));
        };
      })(this));
    };

    Context.prototype.remove = function(path) {
      var remove;
      remove = Q.denodeify(fsx.remove.bind(fs));
      return remove(path);
    };

    Context.prototype.resolve = function() {
      var path;
      path = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Path.resolve.apply(Path, [this.path].concat(__slice.call(path)));
    };

    Context.prototype.join = function() {
      var path;
      path = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Path.join.apply(Path, [this.path].concat(__slice.call(path)));
    };

    Context.prototype.relative = function(path) {
      return Path.relative(this.path, path);
    };

    Context.prototype.subContext = function() {
      var newPath, subPath;
      subPath = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      newPath = this.resolve.apply(this, subPath);
      return new this.constructor(newPath);
    };

    return Context;

  })();

  module.exports = Context;

}).call(this);
