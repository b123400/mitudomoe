// Generated by CoffeeScript 1.8.0
var BaseSyntax, LineSyntax,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseSyntax = require('./base');

LineSyntax = (function(_super) {
  __extends(LineSyntax, _super);

  function LineSyntax() {}

  LineSyntax.prototype.lexingStep = function(input) {
    var content, firstLineBreak;
    firstLineBreak = input.indexOf('\n');
    if (firstLineBreak !== -1) {
      content = input.slice(0, +firstLineBreak + 1 || 9e9).slice(0, -1);
      this.yytext = [content, '\n'];
      if (content.length) {
        return ['INLINE', 'LINEBREAK'];
      } else {
        return ['EMPTYLINE', 'LINEBREAK'];
      }
    } else {
      this.yytext = input;
      return 'LASTLINE';
    }
    return false;
  };

  LineSyntax.prototype.grammar = function(bnf) {
    return {
      STATE: [
        this.pattern('LINE', function() {
          return $1;
        })
      ],
      LINE: [
        this.pattern('LASTLINE', function() {
          return {
            text: $1
          };
        }), this.pattern('INLINE LINEBREAK', function() {
          return {
            text: $1
          };
        }), this.pattern('EMPTYLINE LINEBREAK', function() {
          return null;
        })
      ]
    };
  };

  return LineSyntax;

})(BaseSyntax);

module.exports = LineSyntax;
